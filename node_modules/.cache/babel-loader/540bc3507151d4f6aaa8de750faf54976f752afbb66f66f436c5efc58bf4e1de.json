{"ast":null,"code":"var _jsxFileName = \"/home/anjali/projects/FocusFlow/src/components/Timer/Progressbar/Progressbar.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport \"./progressbar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Progressbar = ({\n  time,\n  initial,\n  isPaused,\n  startInterval,\n  setStartInterval,\n  reset,\n  skip,\n  isBreak\n}) => {\n  _s();\n  const RADIUS = 120;\n  const circumference = 2 * Math.PI * RADIUS;\n  const percent = React.useRef(100);\n  const percentPerSecond = 100 / (initial * 60);\n  const timeDiff = React.useRef();\n  const draw = val => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n    if (val < 0) {\n      val = 0;\n    }\n    if (val > 100) {\n      val = 100;\n    }\n    var pct = (100 - val) / 100 * circumference;\n    svgCircle.style.strokeDashoffset = pct;\n  };\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n    document.addEventListener(\"visibilitychange\", () => {\n      if (document.hidden) {\n        svgCircle.style.transition = \"stroke-dashoffset 0s linear\";\n      } else {\n        svgCircle.style.transition = \"stroke-dashoffset 1s linear\";\n      }\n    });\n  }, []);\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n    if (startInterval) {\n      svgCircle.style.transition = \"stroke-dashoffset 1s linear\";\n      percent.current = percent.current - percentPerSecond;\n      draw(percent.current);\n    }\n  }, [time, startInterval]); //eslint-disable-line\n\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n    if (isPaused) {\n      let offset = getComputedStyle(svgCircle).strokeDashoffset;\n      svgCircle.style.strokeDashoffset = offset;\n      let actualPercent = 100 - 100 * offset.split(\"px\")[0] / circumference;\n      let percentDiff = Math.abs(percent.current - actualPercent);\n      timeDiff.current = 1 / percentPerSecond * percentDiff;\n    } else {\n      if (timeDiff.current) {\n        svgCircle.style.transitionDuration = `${timeDiff.current}s`;\n        draw(percent.current);\n        document.querySelector(\"#svg #bar\").style.transitionDuration = `1s`;\n      }\n    }\n  }, [isPaused]); //eslint-disable-line\n\n  React.useEffect(() => {\n    if (time === 0) {\n      percent.current = 100;\n      draw(percent.current);\n      setStartInterval(false);\n    }\n  });\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n    percent.current = 100;\n    svgCircle.style.transition = \"stroke-dashoffset 0s linear\";\n    svgCircle.style.strokeDashoffset = \"0px\";\n    setStartInterval(false);\n  }, [reset, skip]); // eslint-disable-line\n\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n    if (isBreak && !isPaused) {\n      setTimeout(() => {\n        svgCircle.style.transition = \"stroke-dashoffset 1s linear\";\n        setStartInterval(true);\n      }, 500);\n    }\n  }, [reset]); // eslint-disable-line\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    id: \"svg\",\n    width: \"200\",\n    height: \"200\",\n    version: \"1.1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n      id: \"barContainer\",\n      r: RADIUS,\n      cx: \"100\",\n      cy: \"100\",\n      fill: \"transparent\",\n      strokeDasharray: circumference,\n      strokeDashoffset: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n      id: \"bar\",\n      r: RADIUS,\n      cx: \"100\",\n      cy: \"100\",\n      fill: \"transparent\",\n      strokeDasharray: circumference,\n      strokeDashoffset: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Progressbar, \"E3w0jFRk2PNDj/DMfpsSAk7GfCg=\");\n_c = Progressbar;\nexport default Progressbar;\nvar _c;\n$RefreshReg$(_c, \"Progressbar\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Progressbar","time","initial","isPaused","startInterval","setStartInterval","reset","skip","isBreak","_s","RADIUS","circumference","Math","PI","percent","useRef","percentPerSecond","timeDiff","draw","val","svgCircle","document","querySelector","pct","style","strokeDashoffset","useEffect","addEventListener","hidden","transition","current","offset","getComputedStyle","actualPercent","split","percentDiff","abs","transitionDuration","setTimeout","id","width","height","version","xmlns","children","r","cx","cy","fill","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anjali/projects/FocusFlow/src/components/Timer/Progressbar/Progressbar.js"],"sourcesContent":["import React from \"react\";\nimport \"./progressbar.css\";\n\nconst Progressbar = ({\n  time,\n  initial,\n  isPaused,\n  startInterval,\n  setStartInterval,\n  reset,\n  skip,\n  isBreak,\n}) => {\n  const RADIUS = 120;\n  const circumference = 2 * Math.PI * RADIUS;\n  const percent = React.useRef(100);\n  const percentPerSecond = 100 / (initial * 60);\n  const timeDiff = React.useRef();\n\n  const draw = (val) => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n\n    if (val < 0) {\n      val = 0;\n    }\n    if (val > 100) {\n      val = 100;\n    }\n\n    var pct = ((100 - val) / 100) * circumference;\n\n    svgCircle.style.strokeDashoffset = pct;\n  };\n\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n\n    document.addEventListener(\"visibilitychange\", () => {\n      if (document.hidden) {\n        svgCircle.style.transition = \"stroke-dashoffset 0s linear\";\n      } else {\n        svgCircle.style.transition = \"stroke-dashoffset 1s linear\";\n      }\n    });\n  }, []);\n\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n\n    if (startInterval) {\n      svgCircle.style.transition = \"stroke-dashoffset 1s linear\";\n      percent.current = percent.current - percentPerSecond;\n      draw(percent.current);\n    }\n  }, [time, startInterval]); //eslint-disable-line\n\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n\n    if (isPaused) {\n      let offset = getComputedStyle(svgCircle).strokeDashoffset;\n      svgCircle.style.strokeDashoffset = offset;\n\n      let actualPercent = 100 - (100 * offset.split(\"px\")[0]) / circumference;\n      let percentDiff = Math.abs(percent.current - actualPercent);\n      timeDiff.current = (1 / percentPerSecond) * percentDiff;\n    } else {\n      if (timeDiff.current) {\n        svgCircle.style.transitionDuration = `${timeDiff.current}s`;\n        draw(percent.current);\n        document.querySelector(\"#svg #bar\").style.transitionDuration = `1s`;\n      }\n    }\n  }, [isPaused]); //eslint-disable-line\n\n  React.useEffect(() => {\n    if (time === 0) {\n      percent.current = 100;\n      draw(percent.current);\n      setStartInterval(false);\n    }\n  });\n\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n    percent.current = 100;\n    svgCircle.style.transition = \"stroke-dashoffset 0s linear\";\n    svgCircle.style.strokeDashoffset = \"0px\";\n    setStartInterval(false);\n  }, [reset, skip]); // eslint-disable-line\n\n  React.useEffect(() => {\n    const svgCircle = document.querySelector(\"#svg #bar\");\n    if (isBreak && !isPaused) {\n      setTimeout(() => {\n        svgCircle.style.transition = \"stroke-dashoffset 1s linear\";\n        setStartInterval(true);\n      }, 500);\n    }\n  }, [reset]); // eslint-disable-line\n\n  return (\n    <svg\n      id=\"svg\"\n      width=\"200\"\n      height=\"200\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <circle\n        id=\"barContainer\"\n        r={RADIUS}\n        cx=\"100\"\n        cy=\"100\"\n        fill=\"transparent\"\n        strokeDasharray={circumference}\n        strokeDashoffset=\"0\"\n      ></circle>\n      <circle\n        id=\"bar\"\n        r={RADIUS}\n        cx=\"100\"\n        cy=\"100\"\n        fill=\"transparent\"\n        strokeDasharray={circumference}\n        strokeDashoffset=\"0\"\n      ></circle>\n    </svg>\n  );\n};\n\nexport default Progressbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}